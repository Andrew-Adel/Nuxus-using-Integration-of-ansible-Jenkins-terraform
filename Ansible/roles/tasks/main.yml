# - name: Update packages
#   yum:
#     name: "*"
#     state: latest

# - name: Install Java (required for Nexus)
#   yum:
#     name: java
#     state: present

# - name: Create nexus user
#   user:
#     name: nexus
#     shell: /bin/bash

# - name: Create Nexus directory
#   file:
#     path: "{{ nexus_dir }}"
#     state: directory

# - name: Check if Nexus Repository Manager file exists
#   stat:
#     path: "{{ nexus_file_path }}"
#   register: nexus_file

# - name: Download Nexus Repository Manager 
#   get_url:
#     url: "{{ nexus_url }}"
#     dest: /home/ec2-user
#     timeout: 600
#   when: not nexus_file.stat.exists

# - name: Extract Nexus
#   unarchive:
#     src: "{{ nexus_file_path }}"
#     dest: "{{ nexus_dir }}"
#     remote_src: yes
#   when: nexus_file.stat.exists and (nexus_file.stat.mtime > (ansible_date_time.epoch | int - 86400))

# - name: Set ownership of Nexus directory
#   file:
#     path: "{{ nexus_dir }}"
#     state: directory
#     owner: nexus
#     group: nexus
#     recurse: yes

# - name: Copy service file 
#   copy:
#     src: nexus.service
#     dest: "{{ systemd_service_dir }}/nexus.service"

# - name: Reload systemd to recognize new services
#   systemd:
#     daemon_reload: yes

# - name: Enable Nexus service
#   systemd:
#     name: nexus
#     enabled: yes

# - name: Start Nexus service
#   systemd: 
#     name: nexus
#     state: started

- name: Update packages
  yum:
    name: "*"
    state: latest

- name: Install Java (required for Nexus)
  yum:
    name: java
    state: present

- name: Create nexus user
  user:
    name: nexus
    shell: /bin/bash

- name: Create Nexus directory
  file:
    path: "{{ nexus_dir }}"
    state: directory

- name: Check if Nexus Repository Manager file exists
  stat:
    path: "{{ nexus_file_path }}"
  register: nexus_file

- name: Download Nexus Repository Manager 
  get_url:
    url: "{{ nexus_url }}"
    dest: /home/ec2-user
    timeout: 600
  when: not nexus_file.stat.exists

- name: Extract Nexus
  unarchive:
    src: "{{ nexus_file_path }}"
    dest: "{{ nexus_dir }}"
    remote_src: yes
  when: nexus_file.stat.exists and (nexus_file.stat.mtime > (ansible_date_time.epoch | int - 86400))

- name: Set ownership of Nexus directory
  file:
    path: "{{ nexus_dir }}"
    state: directory
    owner: nexus
    group: nexus
    recurse: yes

- name: Copy service file 
  copy:
    src: nexus.service
    dest: "{{ systemd_service_dir }}/nexus.service"

- name: Reload systemd to recognize new services
  systemd:
    daemon_reload: yes

- name: Enable Nexus service
  systemd:
    name: nexus
    enabled: yes

- name: Start Nexus service
  systemd: 
    name: nexus
    state: started